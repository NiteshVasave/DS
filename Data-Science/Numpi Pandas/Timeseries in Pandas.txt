Here we will explore the DateTime functions provided by Pandas and how efficient it is to analyse Time Series data.
Shown below is a time series data of the pollution in South Africa.image.png

import pandas as pd
air_df = pd.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/AirQualityUCI.csv')                                      # Import the Dataset
air_df.head()
type(air_df['CO(GT)'])
air_df.describe()
air_df[air_df['NMHC(GT)']==-200]['NMHC(GT)'].count()
Almost 90% of the elements of NMHC(GT) is -200.0. Therefore dropping this column.

air_df.drop(['NMHC(GT)'], axis=1)
#air_df.head()                                                                  # Observe the columns and rows of the dataset
Info of dataset provides column data type and the number of values

air_df.info()
Date and Time columns are objects datatype. We need to convert them to datetime format.
Convert the Date to datetime object. Format is used to specify MM/DD/YY

air_df.head(1)
air_df['Date'] = pd.to_datetime(air_df['Date'], format='%m/%d/%Y')     
air_df.info()
Checking the unique values in air_df[ 'Time' ] and their count.

air_df['Time'].unique()     
air_df.Time.unique()
Converting time to pandas datetime with format HH/MM/SS

air_df['Time'] = pd.to_datetime(air_df['Time'], format = '%H:%M:%S')     
air_df.dtypes                                         # Final check for our date and time column
year = air_df.Date.dt.year                            # Extracting Year from Date column
print(year.head())
month = air_df.Date.dt.month                          # Extracting Month from Date column
print(month.head())
month.nunique()                                       # Counting the number of months
day = air_df.Date.dt.day                              # Extracting Day from Date column
print(day.head())    
day.nunique()                                         # Counting the number of days
week = air_df.Date.dt.week                            # Extracting week number from Date column
print(week.head())
The index of week days are provided below.
0 = Monday
1 = Tuesday
2 = Wednesday
3 = Thursday
4 = Friday
5 = Saturday
6 = Sunday

day_of_week = air_df.Date.dt.dayofweek                 # Extracting the day of the week number
print(day_of_week.head())
day_name = air_df.Date.dt.weekday_name                 # Extracting the name of the day
print(day_name.head())
day_of_year = air_df.Date.dt.dayofyear                 # Extracting the day of the year
print(day_of_year.head())
hour = air_df.Time.dt.hour                             # Extracting the hour from time
print(hour.head())
hour.nunique()                                         # Counting the number of hours
minute = air_df.Time.dt.minute                         # Extracting the minutes from the time
print(minute.head())
second = air_df.Time.dt.second                         # Extracting the seconds from the time
print(second.head())
Performing Conditional operations on Time.
Lets measure the number of records before 9 a.m.

timestamp = pd.to_datetime("09:00:00", format='%H:%M:%S')   
air_df[air_df['Time'] < timestamp].shape
There are 3510 records where time is before 9 am

Performing Conditional operations on Date.
Lets measure the number of records before 01/01/2005

datestamp = pd.to_datetime("01/01/2005", format='%d/%m/%Y')
from datetime import timedelta
#datestamp + timedelta(days=1)
#datestamp + timedelta(days=-1)
â€‹
air_df[air_df['Date'] < datestamp].tail()
There are 7109 records before jan 1 2005